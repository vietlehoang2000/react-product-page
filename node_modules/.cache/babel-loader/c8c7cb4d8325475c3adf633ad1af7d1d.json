{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nconst initialState = {\n  userName: \"\",\n  passWord: \"\",\n  logInStatus: false\n};\nconst Apiurl = \"https://fake-rest-api-nodejs.herokuapp.com/login\";\nconst data = {\n  username: \"admin\",\n  password: \"admin\"\n};\nexport const fetchUserById = createAsyncThunk(\"authenticate/cookies\", async () => {\n  const response = await fetch(`${url}`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(data)\n  });\n\n  if (response.status === 200) {\n    const data = await response.json();\n    const total = response.headers.get(\"X-Total-Count\");\n    return {\n      data,\n      total\n    };\n  } else {\n    return response.status + \":\" + response.statusText;\n  }\n});\nexport const authenticateSlide = createSlice({\n  name: \"authentication\",\n  initialState,\n  reducers: {//without async call\n    // getAccount: (state,action) => {\n    //   if(action.payload[0]!==''&&action.payload[1]!==''){\n    //   state.userName = action.payload[0];\n    //   state.passWord = action.payload[1];\n    //   }\n    //   else{\n    //     console.log('wrong')\n    //   }\n    //   console.log(state.userName,state.passWord)\n    // },\n    // checkAccount: (state,action) => {\n    //   if(action.payload[0]===state.userName&&action.payload[1]===state.passWord){\n    //       state.logInStatus=true;\n    //   }\n    // },\n  },\n  extraReducers: builder => {\n    // Add reducers for additional action types here, and handle loading state as needed\n    builder.addCase(fetchUserById.fulfilled, (state, action) => {\n      // Add user to the state array\n      state.userName = action.payload;\n    });\n  }\n}); // Action creators are generated for each case reducer function\n\nexport const {\n  getAccount,\n  checkAccount\n} = authenticateSlide.actions;\nexport default authenticateSlide.reducer;","map":{"version":3,"sources":["/Users/vietle/Documents/Techmaster/React/B8/product-page/src/components/authentication/authenticateSlide.js"],"names":["createSlice","createAsyncThunk","initialState","userName","passWord","logInStatus","Apiurl","data","username","password","fetchUserById","response","fetch","url","method","headers","body","JSON","stringify","status","json","total","get","statusText","authenticateSlide","name","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","getAccount","checkAccount","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,EADS;AAEnBC,EAAAA,QAAQ,EAAE,EAFS;AAGnBC,EAAAA,WAAW,EAAE;AAHM,CAArB;AAMA,MAAMC,MAAM,GAAG,kDAAf;AAEA,MAAMC,IAAI,GAAG;AAAEC,EAAAA,QAAQ,EAAE,OAAZ;AAAqBC,EAAAA,QAAQ,EAAE;AAA/B,CAAb;AAEA,OAAO,MAAMC,aAAa,GAAGT,gBAAgB,CAC3C,sBAD2C,EAE3C,YAAY;AACV,QAAMU,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEC,GAAI,EAAR,EAAW;AACrCC,IAAAA,MAAM,EAAE,MAD6B;AAErCC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAF4B;AAKrCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeX,IAAf;AAL+B,GAAX,CAA5B;;AAOA,MAAII,QAAQ,CAACQ,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,UAAMZ,IAAI,GAAG,MAAMI,QAAQ,CAACS,IAAT,EAAnB;AACA,UAAMC,KAAK,GAAGV,QAAQ,CAACI,OAAT,CAAiBO,GAAjB,CAAqB,eAArB,CAAd;AACA,WAAO;AAAEf,MAAAA,IAAF;AAAQc,MAAAA;AAAR,KAAP;AACD,GAJD,MAIO;AACL,WAAOV,QAAQ,CAACQ,MAAT,GAAkB,GAAlB,GAAwBR,QAAQ,CAACY,UAAxC;AACD;AACF,CAjB0C,CAAtC;AAoBP,OAAO,MAAMC,iBAAiB,GAAGxB,WAAW,CAAC;AAC3CyB,EAAAA,IAAI,EAAE,gBADqC;AAE3CvB,EAAAA,YAF2C;AAG3CwB,EAAAA,QAAQ,EAAE,CACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBQ,GAHiC;AAqB3CC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1B;AACAA,IAAAA,OAAO,CAACC,OAAR,CAAgBnB,aAAa,CAACoB,SAA9B,EAAyC,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC1D;AACAD,MAAAA,KAAK,CAAC5B,QAAN,GAAiB6B,MAAM,CAACC,OAAxB;AACD,KAHD;AAID;AA3B0C,CAAD,CAArC,C,CA8BP;;AACA,OAAO,MAAM;AAAEC,EAAAA,UAAF;AAAcC,EAAAA;AAAd,IAA+BX,iBAAiB,CAACY,OAAvD;AAEP,eAAeZ,iBAAiB,CAACa,OAAjC","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  userName: \"\",\n  passWord: \"\",\n  logInStatus: false,\n};\n\nconst Apiurl = \"https://fake-rest-api-nodejs.herokuapp.com/login\";\n\nconst data = { username: \"admin\", password: \"admin\" };\n\nexport const fetchUserById = createAsyncThunk(\n  \"authenticate/cookies\",\n  async () => {\n    const response = await fetch(`${url}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    });\n    if (response.status === 200) {\n      const data = await response.json();\n      const total = response.headers.get(\"X-Total-Count\");\n      return { data, total };\n    } else {\n      return response.status + \":\" + response.statusText;\n    }\n  }\n);\n\nexport const authenticateSlide = createSlice({\n  name: \"authentication\",\n  initialState,\n  reducers: {\n    //without async call\n    // getAccount: (state,action) => {\n    //   if(action.payload[0]!==''&&action.payload[1]!==''){\n    //   state.userName = action.payload[0];\n    //   state.passWord = action.payload[1];\n    //   }\n    //   else{\n    //     console.log('wrong')\n    //   }\n    //   console.log(state.userName,state.passWord)\n    // },\n    // checkAccount: (state,action) => {\n    //   if(action.payload[0]===state.userName&&action.payload[1]===state.passWord){\n    //       state.logInStatus=true;\n    //   }\n    // },\n  },\n  extraReducers: (builder) => {\n    // Add reducers for additional action types here, and handle loading state as needed\n    builder.addCase(fetchUserById.fulfilled, (state, action) => {\n      // Add user to the state array\n      state.userName = action.payload;\n    });\n  },\n});\n\n// Action creators are generated for each case reducer function\nexport const { getAccount, checkAccount } = authenticateSlide.actions;\n\nexport default authenticateSlide.reducer;\n"]},"metadata":{},"sourceType":"module"}