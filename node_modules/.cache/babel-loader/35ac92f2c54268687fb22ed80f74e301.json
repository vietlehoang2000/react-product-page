{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nconst initialState = {\n  userName: \"\",\n  passWord: \"\",\n  logInStatus: false\n};\nconst urlAPI = \"https://fake-rest-api-nodejs.herokuapp.com/login\";\nconst data = {\n  username: state.userName,\n  password: \"admin\"\n};\nexport const logIn = createAsyncThunk(\"authenticate/logIn\", async () => {\n  const response = await fetch(`${urlAPI}`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(data)\n  });\n\n  if (response.status === 200) {\n    const data = await response.json();\n    return data;\n  } else {\n    return response.status + \":\" + response.statusText;\n  }\n});\nexport const authenticateSlide = createSlice({\n  name: \"authentication\",\n  initialState,\n  reducers: {\n    getAccount: (state, action) => {\n      if (action.payload[0] !== '' && action.payload[1] !== '') {\n        state.userName = action.payload[0];\n        state.passWord = action.payload[1];\n      } else {\n        console.log('wrong');\n      }\n\n      console.log(state.userName, state.passWord);\n    },\n    checkAccount: (state, action) => {\n      if (action.payload[0] === state.userName && action.payload[1] === state.passWord) {\n        state.logInStatus = true;\n      }\n    }\n  },\n  extraReducers: builder => {\n    // Add reducers for additional action types here, and handle loading state as needed\n    builder.addCase(logIn.fulfilled, (state, action) => {\n      // Add user to the state array\n      console.log(action.payload);\n      state.userName = action.payload;\n    });\n  }\n}); // Action creators are generated for each case reducer function\n\nexport const {\n  getAccount,\n  checkAccount\n} = authenticateSlide.actions;\nexport default authenticateSlide.reducer;","map":{"version":3,"sources":["/Users/vietle/Documents/Techmaster/React/B8/product-page/src/components/authentication/authenticateSlide.js"],"names":["createSlice","createAsyncThunk","initialState","userName","passWord","logInStatus","urlAPI","data","username","state","password","logIn","response","fetch","method","headers","body","JSON","stringify","status","json","statusText","authenticateSlide","name","reducers","getAccount","action","payload","console","log","checkAccount","extraReducers","builder","addCase","fulfilled","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,EADS;AAEnBC,EAAAA,QAAQ,EAAE,EAFS;AAGnBC,EAAAA,WAAW,EAAE;AAHM,CAArB;AAMA,MAAMC,MAAM,GAAG,kDAAf;AAEA,MAAMC,IAAI,GAAG;AAAEC,EAAAA,QAAQ,EAAEC,KAAK,CAACN,QAAlB;AAA4BO,EAAAA,QAAQ,EAAE;AAAtC,CAAb;AAEA,OAAO,MAAMC,KAAK,GAAGV,gBAAgB,CACnC,oBADmC,EAEnC,YAAY;AACV,QAAMW,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEP,MAAO,EAAX,EAAc;AACxCQ,IAAAA,MAAM,EAAE,MADgC;AAExCC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAF+B;AAKxCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeX,IAAf;AALkC,GAAd,CAA5B;;AAOA,MAAIK,QAAQ,CAACO,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,UAAMZ,IAAI,GAAG,MAAMK,QAAQ,CAACQ,IAAT,EAAnB;AACA,WAAOb,IAAP;AACD,GAHD,MAGO;AACL,WAAOK,QAAQ,CAACO,MAAT,GAAkB,GAAlB,GAAwBP,QAAQ,CAACS,UAAxC;AACD;AACF,CAhBkC,CAA9B;AAmBP,OAAO,MAAMC,iBAAiB,GAAGtB,WAAW,CAAC;AAC3CuB,EAAAA,IAAI,EAAE,gBADqC;AAE3CrB,EAAAA,YAF2C;AAG3CsB,EAAAA,QAAQ,EAAE;AACRC,IAAAA,UAAU,EAAE,CAAChB,KAAD,EAAOiB,MAAP,KAAkB;AAC5B,UAAGA,MAAM,CAACC,OAAP,CAAe,CAAf,MAAoB,EAApB,IAAwBD,MAAM,CAACC,OAAP,CAAe,CAAf,MAAoB,EAA/C,EAAkD;AAClDlB,QAAAA,KAAK,CAACN,QAAN,GAAiBuB,MAAM,CAACC,OAAP,CAAe,CAAf,CAAjB;AACAlB,QAAAA,KAAK,CAACL,QAAN,GAAiBsB,MAAM,CAACC,OAAP,CAAe,CAAf,CAAjB;AACC,OAHD,MAII;AACFC,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACD;;AACDD,MAAAA,OAAO,CAACC,GAAR,CAAYpB,KAAK,CAACN,QAAlB,EAA2BM,KAAK,CAACL,QAAjC;AACD,KAVO;AAWR0B,IAAAA,YAAY,EAAE,CAACrB,KAAD,EAAOiB,MAAP,KAAkB;AAC9B,UAAGA,MAAM,CAACC,OAAP,CAAe,CAAf,MAAoBlB,KAAK,CAACN,QAA1B,IAAoCuB,MAAM,CAACC,OAAP,CAAe,CAAf,MAAoBlB,KAAK,CAACL,QAAjE,EAA0E;AACtEK,QAAAA,KAAK,CAACJ,WAAN,GAAkB,IAAlB;AACH;AACF;AAfO,GAHiC;AAoB3C0B,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1B;AACAA,IAAAA,OAAO,CAACC,OAAR,CAAgBtB,KAAK,CAACuB,SAAtB,EAAiC,CAACzB,KAAD,EAAQiB,MAAR,KAAmB;AAClD;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYH,MAAM,CAACC,OAAnB;AACAlB,MAAAA,KAAK,CAACN,QAAN,GAAiBuB,MAAM,CAACC,OAAxB;AACD,KAJD;AAKD;AA3B0C,CAAD,CAArC,C,CA8BP;;AACA,OAAO,MAAM;AAAEF,EAAAA,UAAF;AAAcK,EAAAA;AAAd,IAA+BR,iBAAiB,CAACa,OAAvD;AAEP,eAAeb,iBAAiB,CAACc,OAAjC","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  userName: \"\",\n  passWord: \"\",\n  logInStatus: false,\n};\n\nconst urlAPI = \"https://fake-rest-api-nodejs.herokuapp.com/login\";\n\nconst data = { username: state.userName, password: \"admin\" };\n\nexport const logIn = createAsyncThunk(\n  \"authenticate/logIn\",\n  async () => {\n    const response = await fetch(`${urlAPI}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    });\n    if (response.status === 200) {\n      const data = await response.json();\n      return data\n    } else {\n      return response.status + \":\" + response.statusText;\n    }\n  }\n);\n\nexport const authenticateSlide = createSlice({\n  name: \"authentication\",\n  initialState,\n  reducers: {\n    getAccount: (state,action) => {\n      if(action.payload[0]!==''&&action.payload[1]!==''){\n      state.userName = action.payload[0];\n      state.passWord = action.payload[1];\n      }\n      else{\n        console.log('wrong')\n      }\n      console.log(state.userName,state.passWord)\n    },\n    checkAccount: (state,action) => {\n      if(action.payload[0]===state.userName&&action.payload[1]===state.passWord){\n          state.logInStatus=true;\n      }\n    },\n  },\n  extraReducers: (builder) => {\n    // Add reducers for additional action types here, and handle loading state as needed\n    builder.addCase(logIn.fulfilled, (state, action) => {\n      // Add user to the state array\n      console.log(action.payload)\n      state.userName = action.payload;\n    });\n  },\n});\n\n// Action creators are generated for each case reducer function\nexport const { getAccount, checkAccount } = authenticateSlide.actions;\n\nexport default authenticateSlide.reducer;\n"]},"metadata":{},"sourceType":"module"}