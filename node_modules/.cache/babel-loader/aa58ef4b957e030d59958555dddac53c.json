{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nconst initialState = {\n  userName: \"\",\n  passWord: \"\",\n  logInStatus: false\n};\nconst urlAPI = \"https://fake-rest-api-nodejs.herokuapp.com/login\";\nexport const logIn = createAsyncThunk(\"authenticate/logIn\", async (username, password) => {\n  const response = await fetch(`${urlAPI}`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      username: `${username}`,\n      password: password\n    })\n  });\n\n  if (response.status === 200) {\n    const data = await response.json();\n    return data;\n  } else {\n    return response.status + \":\" + response.statusText;\n  }\n});\nexport const authenticateSlide = createSlice({\n  name: \"authentication\",\n  initialState,\n  reducers: {\n    getAccount: (state, action) => {\n      if (action.payload[0] !== '' && action.payload[1] !== '') {\n        state.userName = action.payload[0];\n        state.passWord = action.payload[1];\n      } else {\n        console.log('wrong');\n      }\n\n      console.log(state.userName, state.passWord);\n    } // checkAccount: (state,action) => {\n    //   // if(action.payload[0]===state.userName&&action.payload[1]===state.passWord){\n    //   //     state.logInStatus=true;\n    //   // }\n    //   data.username=action.payload[0];\n    //   data.password=action.payload[1];\n    // },\n\n  },\n  extraReducers: builder => {\n    // Add reducers for additional action types here, and handle loading state as needed\n    builder.addCase(logIn.fulfilled, (state, action) => {\n      // Add user to the state array\n      console.log(action.payload);\n      state.userName = action.payload;\n    });\n  }\n}); // Action creators are generated for each case reducer function\n\nexport const {\n  getAccount,\n  checkAccount\n} = authenticateSlide.actions;\nexport default authenticateSlide.reducer;","map":{"version":3,"sources":["/Users/vietle/Documents/Techmaster/React/B8/product-page/src/components/authentication/authenticateSlide.js"],"names":["createSlice","createAsyncThunk","initialState","userName","passWord","logInStatus","urlAPI","logIn","username","password","response","fetch","method","headers","body","JSON","stringify","status","data","json","statusText","authenticateSlide","name","reducers","getAccount","state","action","payload","console","log","extraReducers","builder","addCase","fulfilled","checkAccount","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AAGA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,EADS;AAEnBC,EAAAA,QAAQ,EAAE,EAFS;AAGnBC,EAAAA,WAAW,EAAE;AAHM,CAArB;AAMA,MAAMC,MAAM,GAAG,kDAAf;AAEA,OAAO,MAAMC,KAAK,GAAGN,gBAAgB,CACnC,oBADmC,EAEnC,OAAOO,QAAP,EAAgBC,QAAhB,KAA6B;AAC3B,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEL,MAAO,EAAX,EAAc;AACxCM,IAAAA,MAAM,EAAE,MADgC;AAExCC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAF+B;AAKxCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAER,MAAAA,QAAQ,EAAG,GAAEA,QAAS,EAAxB;AAA2BC,MAAAA,QAAQ,EAACA;AAApC,KAAf;AALkC,GAAd,CAA5B;;AAOA,MAAIC,QAAQ,CAACO,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,UAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAT,EAAnB;AACA,WAAOD,IAAP;AACD,GAHD,MAGO;AACL,WAAOR,QAAQ,CAACO,MAAT,GAAkB,GAAlB,GAAwBP,QAAQ,CAACU,UAAxC;AACD;AACF,CAhBkC,CAA9B;AAmBP,OAAO,MAAMC,iBAAiB,GAAGrB,WAAW,CAAC;AAC3CsB,EAAAA,IAAI,EAAE,gBADqC;AAE3CpB,EAAAA,YAF2C;AAG3CqB,EAAAA,QAAQ,EAAE;AAERC,IAAAA,UAAU,EAAE,CAACC,KAAD,EAAOC,MAAP,KAAkB;AAC5B,UAAGA,MAAM,CAACC,OAAP,CAAe,CAAf,MAAoB,EAApB,IAAwBD,MAAM,CAACC,OAAP,CAAe,CAAf,MAAoB,EAA/C,EAAkD;AAClDF,QAAAA,KAAK,CAACtB,QAAN,GAAiBuB,MAAM,CAACC,OAAP,CAAe,CAAf,CAAjB;AACAF,QAAAA,KAAK,CAACrB,QAAN,GAAiBsB,MAAM,CAACC,OAAP,CAAe,CAAf,CAAjB;AACC,OAHD,MAII;AACFC,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACD;;AACDD,MAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAK,CAACtB,QAAlB,EAA2BsB,KAAK,CAACrB,QAAjC;AACD,KAXO,CAaR;AACA;AACA;AACA;AACA;AACA;AACA;;AAnBQ,GAHiC;AAwB3C0B,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1B;AACAA,IAAAA,OAAO,CAACC,OAAR,CAAgBzB,KAAK,CAAC0B,SAAtB,EAAiC,CAACR,KAAD,EAAQC,MAAR,KAAmB;AAClD;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYH,MAAM,CAACC,OAAnB;AACAF,MAAAA,KAAK,CAACtB,QAAN,GAAiBuB,MAAM,CAACC,OAAxB;AACD,KAJD;AAKD;AA/B0C,CAAD,CAArC,C,CAkCP;;AACA,OAAO,MAAM;AAAEH,EAAAA,UAAF;AAAcU,EAAAA;AAAd,IAA+Bb,iBAAiB,CAACc,OAAvD;AAEP,eAAed,iBAAiB,CAACe,OAAjC","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\n\nconst initialState = {\n  userName: \"\",\n  passWord: \"\",\n  logInStatus: false,\n};\n\nconst urlAPI = \"https://fake-rest-api-nodejs.herokuapp.com/login\";\n\nexport const logIn = createAsyncThunk(\n  \"authenticate/logIn\",\n  async (username,password) => {\n    const response = await fetch(`${urlAPI}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ username: `${username}`, password:password}),\n    });\n    if (response.status === 200) {\n      const data = await response.json();\n      return data\n    } else {\n      return response.status + \":\" + response.statusText;\n    }\n  }\n);\n\nexport const authenticateSlide = createSlice({\n  name: \"authentication\",\n  initialState,\n  reducers: {\n\n    getAccount: (state,action) => {\n      if(action.payload[0]!==''&&action.payload[1]!==''){\n      state.userName = action.payload[0];\n      state.passWord = action.payload[1];\n      }\n      else{\n        console.log('wrong')\n      }\n      console.log(state.userName,state.passWord)\n    },\n\n    // checkAccount: (state,action) => {\n    //   // if(action.payload[0]===state.userName&&action.payload[1]===state.passWord){\n    //   //     state.logInStatus=true;\n    //   // }\n    //   data.username=action.payload[0];\n    //   data.password=action.payload[1];\n    // },\n  },\n  extraReducers: (builder) => {\n    // Add reducers for additional action types here, and handle loading state as needed\n    builder.addCase(logIn.fulfilled, (state, action) => {\n      // Add user to the state array\n      console.log(action.payload)\n      state.userName = action.payload;\n    });\n  },\n});\n\n// Action creators are generated for each case reducer function\nexport const { getAccount, checkAccount } = authenticateSlide.actions;\n\nexport default authenticateSlide.reducer;\n"]},"metadata":{},"sourceType":"module"}