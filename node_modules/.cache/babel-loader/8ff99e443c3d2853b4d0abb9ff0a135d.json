{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport ReduxThunk from 'redux-thunk';\nconst initialState = {\n  userName: '',\n  passWord: '',\n  logInStatus: false\n};\nconst userAPI = 'https://product-list-fake-rest-server.herokuapp.com/Notebook';\nconst fetchUserById = createAsyncThunk('users/fetchByIdStatus', async (userId, thunkAPI) => {\n  const response = await userAPI.fetchById(userId);\n  return response.data;\n});\nexport const authenticateSlide = createSlice({\n  name: 'authentication',\n  initialState,\n  reducers: {//without async call\n    // getAccount: (state,action) => {\n    //   if(action.payload[0]!==''&&action.payload[1]!==''){\n    //   state.userName = action.payload[0];\n    //   state.passWord = action.payload[1];\n    //   }\n    //   else{\n    //     console.log('wrong')\n    //   }\n    //   console.log(state.userName,state.passWord)\n    // },\n    // checkAccount: (state,action) => {\n    //   if(action.payload[0]===state.userName&&action.payload[1]===state.passWord){\n    //       state.logInStatus=true;\n    //   }\n    // },\n  },\n  extraReducers: builder => {\n    // Add reducers for additional action types here, and handle loading state as needed\n    builder.addCase(fetchUserById.fulfilled, (state, action) => {\n      // Add user to the state array\n      state.userName = action.payload;\n    });\n  }\n}); // Action creators are generated for each case reducer function\n\nexport const {\n  getAccount,\n  checkAccount\n} = authenticateSlide.actions;\nexport default authenticateSlide.reducer;","map":{"version":3,"sources":["/Users/vietle/Documents/Techmaster/React/B8/product-page/src/components/authentication/authenticateSlide.js"],"names":["createSlice","createAsyncThunk","ReduxThunk","initialState","userName","passWord","logInStatus","userAPI","fetchUserById","userId","thunkAPI","response","fetchById","data","authenticateSlide","name","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","getAccount","checkAccount","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AAEA,OAAOC,UAAP,MAAuB,aAAvB;AAGA,MAAMC,YAAY,GAAC;AACfC,EAAAA,QAAQ,EAAC,EADM;AAEfC,EAAAA,QAAQ,EAAC,EAFM;AAGfC,EAAAA,WAAW,EAAC;AAHG,CAAnB;AAMA,MAAMC,OAAO,GAAC,8DAAd;AAEA,MAAMC,aAAa,GAAGP,gBAAgB,CACpC,uBADoC,EAEpC,OAAOQ,MAAP,EAAeC,QAAf,KAA4B;AAC1B,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,SAAR,CAAkBH,MAAlB,CAAvB;AACA,SAAOE,QAAQ,CAACE,IAAhB;AACD,CALmC,CAAtC;AAQA,OAAO,MAAMC,iBAAiB,GAAGd,WAAW,CAAC;AACzCe,EAAAA,IAAI,EAAE,gBADmC;AAEzCZ,EAAAA,YAFyC;AAGzCa,EAAAA,QAAQ,EAAE,CAER;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBQ,GAH+B;AAsBzCC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1B;AACAA,IAAAA,OAAO,CAACC,OAAR,CAAgBX,aAAa,CAACY,SAA9B,EAAyC,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC1D;AACAD,MAAAA,KAAK,CAACjB,QAAN,GAAekB,MAAM,CAACC,OAAtB;AACD,KAHD;AAID;AA5BwC,CAAD,CAArC,C,CA+BL;;AACA,OAAO,MAAM;AAAEC,EAAAA,UAAF;AAAcC,EAAAA;AAAd,IAA8BX,iBAAiB,CAACY,OAAtD;AAEP,eAAeZ,iBAAiB,CAACa,OAAjC","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\n\nimport ReduxThunk from 'redux-thunk';\n\n\nconst initialState={\n    userName:'',\n    passWord:'',\n    logInStatus:false\n}\n\nconst userAPI='https://product-list-fake-rest-server.herokuapp.com/Notebook';\n\nconst fetchUserById = createAsyncThunk(\n  'users/fetchByIdStatus',\n  async (userId, thunkAPI) => {\n    const response = await userAPI.fetchById(userId)\n    return response.data\n  }\n)\n\nexport const authenticateSlide = createSlice({\n    name: 'authentication',\n    initialState,\n    reducers: {\n\n      //without async call\n      // getAccount: (state,action) => {\n      //   if(action.payload[0]!==''&&action.payload[1]!==''){\n      //   state.userName = action.payload[0];\n      //   state.passWord = action.payload[1];\n      //   }\n      //   else{\n      //     console.log('wrong')\n      //   }\n      //   console.log(state.userName,state.passWord)\n      // },\n      // checkAccount: (state,action) => {\n      //   if(action.payload[0]===state.userName&&action.payload[1]===state.passWord){\n      //       state.logInStatus=true;\n      //   }\n      // },\n    },\n    extraReducers: (builder) => {\n      // Add reducers for additional action types here, and handle loading state as needed\n      builder.addCase(fetchUserById.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.userName=action.payload;\n      })\n    },\n  })\n  \n  // Action creators are generated for each case reducer function\n  export const { getAccount, checkAccount} = authenticateSlide.actions\n  \n  export default authenticateSlide.reducer"]},"metadata":{},"sourceType":"module"}