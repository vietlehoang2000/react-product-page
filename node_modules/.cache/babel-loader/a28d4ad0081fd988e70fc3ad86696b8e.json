{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nconst initialState = {\n  userName: \"\",\n  passWord: \"\",\n  logInStatus: false\n};\nconst urlAPI = \"https://fake-rest-api-nodejs.herokuapp.com/login\";\nexport const logIn = createAsyncThunk(\"authenticate/logIn\", async inputData => {\n  const response = await fetch(`${urlAPI}`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(inputData)\n  });\n  const data = await response.json();\n\n  if (response.status === 200) {\n    return data;\n  } else {\n    throw data; // return response.status + \":\" + response.statusText;\n  }\n});\nexport const authenticateSlide = createSlice({\n  name: \"authentication\",\n  initialState,\n  reducers: {\n    getAccount: (state, action) => {\n      if (action.payload[0] !== '' && action.payload[1] !== '') {\n        state.userName = action.payload[0];\n        state.passWord = action.payload[1];\n      } else {\n        console.log('wrong');\n      }\n\n      console.log(state.userName, state.passWord);\n    }\n  },\n  extraReducers: builder => {\n    // Add reducers for additional action types here, and handle loading state as needed\n    builder.addCase(logIn.fulfilled, (state, action) => {\n      // Add user to the state array\n      localStorage.setItem('token', action.payload.token);\n      state.logInStatus = true;\n    }).addCase(logIn.rejected, (state, action) => {\n      // Add user to the state array\n      console.log(action.error.message);\n    });\n  }\n}); // Action creators are generated for each case reducer function\n\nexport const {\n  getAccount,\n  checkAccount\n} = authenticateSlide.actions;\nexport default authenticateSlide.reducer;","map":{"version":3,"sources":["/Users/vietle/Documents/Techmaster/React/B8/product-page/src/components/authentication/authenticateSlide.js"],"names":["createSlice","createAsyncThunk","initialState","userName","passWord","logInStatus","urlAPI","logIn","inputData","response","fetch","method","headers","body","JSON","stringify","data","json","status","authenticateSlide","name","reducers","getAccount","state","action","payload","console","log","extraReducers","builder","addCase","fulfilled","localStorage","setItem","token","rejected","error","message","checkAccount","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AAGA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,EADS;AAEnBC,EAAAA,QAAQ,EAAE,EAFS;AAGnBC,EAAAA,WAAW,EAAE;AAHM,CAArB;AAMA,MAAMC,MAAM,GAAG,kDAAf;AAEA,OAAO,MAAMC,KAAK,GAAGN,gBAAgB,CACnC,oBADmC,EAEnC,MAAOO,SAAP,IAAqB;AAEnB,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,MAAO,EAAX,EAAc;AACxCK,IAAAA,MAAM,EAAE,MADgC;AAExCC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAF+B;AAKxCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,SAAf;AALkC,GAAd,CAA5B;AAQA,QAAMQ,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAT,EAAnB;;AACA,MAAIR,QAAQ,CAACS,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,WAAOF,IAAP;AACD,GAFD,MAEO;AACL,UAAMA,IAAN,CADK,CAEL;AACD;AACF,CAnBkC,CAA9B;AAsBP,OAAO,MAAMG,iBAAiB,GAAGnB,WAAW,CAAC;AAC3CoB,EAAAA,IAAI,EAAE,gBADqC;AAE3ClB,EAAAA,YAF2C;AAG3CmB,EAAAA,QAAQ,EAAE;AAERC,IAAAA,UAAU,EAAE,CAACC,KAAD,EAAOC,MAAP,KAAkB;AAC5B,UAAGA,MAAM,CAACC,OAAP,CAAe,CAAf,MAAoB,EAApB,IAAwBD,MAAM,CAACC,OAAP,CAAe,CAAf,MAAoB,EAA/C,EAAkD;AAClDF,QAAAA,KAAK,CAACpB,QAAN,GAAiBqB,MAAM,CAACC,OAAP,CAAe,CAAf,CAAjB;AACAF,QAAAA,KAAK,CAACnB,QAAN,GAAiBoB,MAAM,CAACC,OAAP,CAAe,CAAf,CAAjB;AACC,OAHD,MAII;AACFC,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACD;;AACDD,MAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAK,CAACpB,QAAlB,EAA2BoB,KAAK,CAACnB,QAAjC;AACD;AAXO,GAHiC;AAgB3CwB,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1B;AACAA,IAAAA,OAAO,CAACC,OAAR,CAAgBvB,KAAK,CAACwB,SAAtB,EAAiC,CAACR,KAAD,EAAQC,MAAR,KAAmB;AAClD;AACAQ,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA6BT,MAAM,CAACC,OAAP,CAAeS,KAA5C;AACAX,MAAAA,KAAK,CAAClB,WAAN,GAAkB,IAAlB;AACD,KAJD,EAIGyB,OAJH,CAIWvB,KAAK,CAAC4B,QAJjB,EAI2B,CAACZ,KAAD,EAAQC,MAAR,KAAmB;AAC5C;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYH,MAAM,CAACY,KAAP,CAAaC,OAAzB;AACD,KAPD;AAQD;AA1B0C,CAAD,CAArC,C,CA6BP;;AACA,OAAO,MAAM;AAAEf,EAAAA,UAAF;AAAcgB,EAAAA;AAAd,IAA+BnB,iBAAiB,CAACoB,OAAvD;AAEP,eAAepB,iBAAiB,CAACqB,OAAjC","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\n\nconst initialState = {\n  userName: \"\",\n  passWord: \"\",\n  logInStatus: false,\n};\n\nconst urlAPI = \"https://fake-rest-api-nodejs.herokuapp.com/login\";\n\nexport const logIn = createAsyncThunk(\n  \"authenticate/logIn\",\n  async (inputData) => {\n    \n    const response = await fetch(`${urlAPI}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(inputData),\n    });\n\n    const data = await response.json();\n    if (response.status === 200) {\n      return data\n    } else {\n      throw data;\n      // return response.status + \":\" + response.statusText;\n    }\n  }\n);\n\nexport const authenticateSlide = createSlice({\n  name: \"authentication\",\n  initialState,\n  reducers: {\n\n    getAccount: (state,action) => {\n      if(action.payload[0]!==''&&action.payload[1]!==''){\n      state.userName = action.payload[0];\n      state.passWord = action.payload[1];\n      }\n      else{\n        console.log('wrong')\n      }\n      console.log(state.userName,state.passWord)\n    },\n  },\n  extraReducers: (builder) => {\n    // Add reducers for additional action types here, and handle loading state as needed\n    builder.addCase(logIn.fulfilled, (state, action) => {\n      // Add user to the state array\n      localStorage.setItem('token',action.payload.token)\n      state.logInStatus=true;\n    }).addCase(logIn.rejected, (state, action) => {\n      // Add user to the state array\n      console.log(action.error.message)\n    });\n  },\n});\n\n// Action creators are generated for each case reducer function\nexport const { getAccount, checkAccount } = authenticateSlide.actions;\n\nexport default authenticateSlide.reducer;\n"]},"metadata":{},"sourceType":"module"}