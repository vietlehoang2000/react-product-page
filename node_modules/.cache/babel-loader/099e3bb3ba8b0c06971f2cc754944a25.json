{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nconst initialState = {\n  userName: \"\",\n  passWord: \"\",\n  logInStatus: false\n};\nconst urlAPI = \"https://fake-rest-api-nodejs.herokuapp.com/login\";\nconst data = {\n  username: \"admin\",\n  password: \"admin\"\n};\nexport const logIn = createAsyncThunk(\"authenticate/logIn\", async () => {\n  const response = await fetch(`${urlAPI}`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(data)\n  });\n\n  if (response.status === 200) {\n    const data = await response.json();\n    return data;\n  } else {\n    return response.status + \":\" + response.statusText;\n  }\n});\nexport const authenticateSlide = createSlice({\n  name: \"authentication\",\n  initialState,\n  reducers: {//without async call\n    // getAccount: (state,action) => {\n    //   if(action.payload[0]!==''&&action.payload[1]!==''){\n    //   state.userName = action.payload[0];\n    //   state.passWord = action.payload[1];\n    //   }\n    //   else{\n    //     console.log('wrong')\n    //   }\n    //   console.log(state.userName,state.passWord)\n    // },\n    // checkAccount: (state,action) => {\n    //   if(action.payload[0]===state.userName&&action.payload[1]===state.passWord){\n    //       state.logInStatus=true;\n    //   }\n    // },\n  },\n  extraReducers: builder => {\n    // Add reducers for additional action types here, and handle loading state as needed\n    builder.addCase(logIn.fulfilled, (state, action) => {\n      // Add user to the state array\n      action.state.userName = action.payload;\n    });\n  }\n}); // Action creators are generated for each case reducer function\n\nexport const {\n  getAccount,\n  checkAccount\n} = authenticateSlide.actions;\nexport default authenticateSlide.reducer;","map":{"version":3,"sources":["/Users/vietle/Documents/Techmaster/React/B8/product-page/src/components/authentication/authenticateSlide.js"],"names":["createSlice","createAsyncThunk","initialState","userName","passWord","logInStatus","urlAPI","data","username","password","logIn","response","fetch","method","headers","body","JSON","stringify","status","json","statusText","authenticateSlide","name","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","getAccount","checkAccount","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,EADS;AAEnBC,EAAAA,QAAQ,EAAE,EAFS;AAGnBC,EAAAA,WAAW,EAAE;AAHM,CAArB;AAMA,MAAMC,MAAM,GAAG,kDAAf;AAEA,MAAMC,IAAI,GAAG;AAAEC,EAAAA,QAAQ,EAAE,OAAZ;AAAqBC,EAAAA,QAAQ,EAAE;AAA/B,CAAb;AAEA,OAAO,MAAMC,KAAK,GAAGT,gBAAgB,CACnC,oBADmC,EAEnC,YAAY;AACV,QAAMU,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEN,MAAO,EAAX,EAAc;AACxCO,IAAAA,MAAM,EAAE,MADgC;AAExCC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAF+B;AAKxCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeV,IAAf;AALkC,GAAd,CAA5B;;AAOA,MAAII,QAAQ,CAACO,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,UAAMX,IAAI,GAAG,MAAMI,QAAQ,CAACQ,IAAT,EAAnB;AACA,WAAOZ,IAAP;AACD,GAHD,MAGO;AACL,WAAOI,QAAQ,CAACO,MAAT,GAAkB,GAAlB,GAAwBP,QAAQ,CAACS,UAAxC;AACD;AACF,CAhBkC,CAA9B;AAmBP,OAAO,MAAMC,iBAAiB,GAAGrB,WAAW,CAAC;AAC3CsB,EAAAA,IAAI,EAAE,gBADqC;AAE3CpB,EAAAA,YAF2C;AAG3CqB,EAAAA,QAAQ,EAAE,CACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBQ,GAHiC;AAqB3CC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1B;AACAA,IAAAA,OAAO,CAACC,OAAR,CAAgBhB,KAAK,CAACiB,SAAtB,EAAiC,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAClD;AACAA,MAAAA,MAAM,CACND,KADA,CACMzB,QADN,GACiB0B,MAAM,CAACC,OADxB;AAED,KAJD;AAKD;AA5B0C,CAAD,CAArC,C,CA+BP;;AACA,OAAO,MAAM;AAAEC,EAAAA,UAAF;AAAcC,EAAAA;AAAd,IAA+BX,iBAAiB,CAACY,OAAvD;AAEP,eAAeZ,iBAAiB,CAACa,OAAjC","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  userName: \"\",\n  passWord: \"\",\n  logInStatus: false,\n};\n\nconst urlAPI = \"https://fake-rest-api-nodejs.herokuapp.com/login\";\n\nconst data = { username: \"admin\", password: \"admin\" };\n\nexport const logIn = createAsyncThunk(\n  \"authenticate/logIn\",\n  async () => {\n    const response = await fetch(`${urlAPI}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    });\n    if (response.status === 200) {\n      const data = await response.json();\n      return data\n    } else {\n      return response.status + \":\" + response.statusText;\n    }\n  }\n);\n\nexport const authenticateSlide = createSlice({\n  name: \"authentication\",\n  initialState,\n  reducers: {\n    //without async call\n    // getAccount: (state,action) => {\n    //   if(action.payload[0]!==''&&action.payload[1]!==''){\n    //   state.userName = action.payload[0];\n    //   state.passWord = action.payload[1];\n    //   }\n    //   else{\n    //     console.log('wrong')\n    //   }\n    //   console.log(state.userName,state.passWord)\n    // },\n    // checkAccount: (state,action) => {\n    //   if(action.payload[0]===state.userName&&action.payload[1]===state.passWord){\n    //       state.logInStatus=true;\n    //   }\n    // },\n  },\n  extraReducers: (builder) => {\n    // Add reducers for additional action types here, and handle loading state as needed\n    builder.addCase(logIn.fulfilled, (state, action) => {\n      // Add user to the state array\n      action.\n      state.userName = action.payload;\n    });\n  },\n});\n\n// Action creators are generated for each case reducer function\nexport const { getAccount, checkAccount } = authenticateSlide.actions;\n\nexport default authenticateSlide.reducer;\n"]},"metadata":{},"sourceType":"module"}