{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nconst initialState = {\n  userName: \"\",\n  passWord: \"\",\n  logInStatus: false\n};\nconst urlAPI = \"https://fake-rest-api-nodejs.herokuapp.com/login\";\nexport const logIn = createAsyncThunk(\"authenticate/logIn\", async inputData => {\n  const response = await fetch(`${urlAPI}`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(inputData)\n  });\n  return response.data; // if (response.status === 200) {\n  //   const data = await response.json();\n  //   return data\n  // } else {\n  //   return response.status + \":\" + response.statusText;\n  // }\n});\nexport const authenticateSlide = createSlice({\n  name: \"authentication\",\n  initialState,\n  reducers: {\n    getAccount: (state, action) => {\n      if (action.payload[0] !== '' && action.payload[1] !== '') {\n        state.userName = action.payload[0];\n        state.passWord = action.payload[1];\n      } else {\n        console.log('wrong');\n      }\n\n      console.log(state.userName, state.passWord);\n    } // checkAccount: (state,action) => {\n    //   // if(action.payload[0]===state.userName&&action.payload[1]===state.passWord){\n    //   //     state.logInStatus=true;\n    //   // }\n    //   data.username=action.payload[0];\n    //   data.password=action.payload[1];\n    // },\n\n  },\n  extraReducers: builder => {\n    // Add reducers for additional action types here, and handle loading state as needed\n    builder.addCase(logIn.fulfilled, (state, action) => {\n      // Add user to the state array\n      console.log(action.payload);\n\n      if (action.payload.status === 200) {\n        const data = action.payload.json();\n        console.log(data);\n      } else {\n        console.log(action.payload.status + \":\" + action.payload.statusText);\n      }\n    });\n  }\n}); // Action creators are generated for each case reducer function\n\nexport const {\n  getAccount,\n  checkAccount\n} = authenticateSlide.actions;\nexport default authenticateSlide.reducer;","map":{"version":3,"sources":["/Users/vietle/Documents/Techmaster/React/B8/product-page/src/components/authentication/authenticateSlide.js"],"names":["createSlice","createAsyncThunk","initialState","userName","passWord","logInStatus","urlAPI","logIn","inputData","response","fetch","method","headers","body","JSON","stringify","data","authenticateSlide","name","reducers","getAccount","state","action","payload","console","log","extraReducers","builder","addCase","fulfilled","status","json","statusText","checkAccount","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AAGA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,EADS;AAEnBC,EAAAA,QAAQ,EAAE,EAFS;AAGnBC,EAAAA,WAAW,EAAE;AAHM,CAArB;AAMA,MAAMC,MAAM,GAAG,kDAAf;AAEA,OAAO,MAAMC,KAAK,GAAGN,gBAAgB,CACnC,oBADmC,EAEnC,MAAOO,SAAP,IAAqB;AAEnB,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,MAAO,EAAX,EAAc;AACxCK,IAAAA,MAAM,EAAE,MADgC;AAExCC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAF+B;AAKxCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,SAAf;AALkC,GAAd,CAA5B;AAOA,SAAOC,QAAQ,CAACO,IAAhB,CATmB,CAUnB;AACA;AACA;AACA;AACA;AACA;AACD,CAlBkC,CAA9B;AAqBP,OAAO,MAAMC,iBAAiB,GAAGjB,WAAW,CAAC;AAC3CkB,EAAAA,IAAI,EAAE,gBADqC;AAE3ChB,EAAAA,YAF2C;AAG3CiB,EAAAA,QAAQ,EAAE;AAERC,IAAAA,UAAU,EAAE,CAACC,KAAD,EAAOC,MAAP,KAAkB;AAC5B,UAAGA,MAAM,CAACC,OAAP,CAAe,CAAf,MAAoB,EAApB,IAAwBD,MAAM,CAACC,OAAP,CAAe,CAAf,MAAoB,EAA/C,EAAkD;AAClDF,QAAAA,KAAK,CAAClB,QAAN,GAAiBmB,MAAM,CAACC,OAAP,CAAe,CAAf,CAAjB;AACAF,QAAAA,KAAK,CAACjB,QAAN,GAAiBkB,MAAM,CAACC,OAAP,CAAe,CAAf,CAAjB;AACC,OAHD,MAII;AACFC,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACD;;AACDD,MAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAK,CAAClB,QAAlB,EAA2BkB,KAAK,CAACjB,QAAjC;AACD,KAXO,CAaR;AACA;AACA;AACA;AACA;AACA;AACA;;AAnBQ,GAHiC;AAwB3CsB,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1B;AACAA,IAAAA,OAAO,CAACC,OAAR,CAAgBrB,KAAK,CAACsB,SAAtB,EAAiC,CAACR,KAAD,EAAQC,MAAR,KAAmB;AAClD;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYH,MAAM,CAACC,OAAnB;;AACA,UAAID,MAAM,CAACC,OAAP,CAAeO,MAAf,KAA0B,GAA9B,EAAmC;AAC/B,cAAMd,IAAI,GAAGM,MAAM,CAACC,OAAP,CAAeQ,IAAf,EAAb;AACAP,QAAAA,OAAO,CAACC,GAAR,CAAaT,IAAb;AACD,OAHH,MAGS;AACLQ,QAAAA,OAAO,CAACC,GAAR,CAAYH,MAAM,CAACC,OAAP,CAAeO,MAAf,GAAwB,GAAxB,GAA8BR,MAAM,CAACC,OAAP,CAAeS,UAAzD;AACD;AACJ,KATD;AAUD;AApC0C,CAAD,CAArC,C,CAuCP;;AACA,OAAO,MAAM;AAAEZ,EAAAA,UAAF;AAAca,EAAAA;AAAd,IAA+BhB,iBAAiB,CAACiB,OAAvD;AAEP,eAAejB,iBAAiB,CAACkB,OAAjC","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\n\nconst initialState = {\n  userName: \"\",\n  passWord: \"\",\n  logInStatus: false,\n};\n\nconst urlAPI = \"https://fake-rest-api-nodejs.herokuapp.com/login\";\n\nexport const logIn = createAsyncThunk(\n  \"authenticate/logIn\",\n  async (inputData) => {\n \n    const response = await fetch(`${urlAPI}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(inputData),\n    });\n    return response.data;\n    // if (response.status === 200) {\n    //   const data = await response.json();\n    //   return data\n    // } else {\n    //   return response.status + \":\" + response.statusText;\n    // }\n  }\n);\n\nexport const authenticateSlide = createSlice({\n  name: \"authentication\",\n  initialState,\n  reducers: {\n\n    getAccount: (state,action) => {\n      if(action.payload[0]!==''&&action.payload[1]!==''){\n      state.userName = action.payload[0];\n      state.passWord = action.payload[1];\n      }\n      else{\n        console.log('wrong')\n      }\n      console.log(state.userName,state.passWord)\n    },\n\n    // checkAccount: (state,action) => {\n    //   // if(action.payload[0]===state.userName&&action.payload[1]===state.passWord){\n    //   //     state.logInStatus=true;\n    //   // }\n    //   data.username=action.payload[0];\n    //   data.password=action.payload[1];\n    // },\n  },\n  extraReducers: (builder) => {\n    // Add reducers for additional action types here, and handle loading state as needed\n    builder.addCase(logIn.fulfilled, (state, action) => {\n      // Add user to the state array\n      console.log(action.payload)\n      if (action.payload.status === 200) {\n          const data = action.payload.json();\n          console.log( data);\n        } else {\n          console.log(action.payload.status + \":\" + action.payload.statusText);\n        }\n    });\n  },\n});\n\n// Action creators are generated for each case reducer function\nexport const { getAccount, checkAccount } = authenticateSlide.actions;\n\nexport default authenticateSlide.reducer;\n"]},"metadata":{},"sourceType":"module"}